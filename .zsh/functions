#!/bin/zsh

# make a thumb %20 the size of a pic
thumbit() {
  for pic in "$@"; do
    case "$pic" in
      *.jpg)  thumb="$(echo "$pic" | sed s/.jpg/-thumb.jpg/g)"              ;;
      *.jpeg) thumb="$(echo "$pic" | sed s/.jpeg/-thumb.jpeg/g)"            ;;
      *.png)  thumb="$(echo "$pic" | sed s/.png/-thumb.png/g)"              ;;
      *)      echo "usage: thumbit [file{.jpg,.jpeg,.png}]" && return 1     ;;
    esac
    cp "$pic" "$thumb"
    mogrify -resize 20% "$thumb"
  done
}

# recursively fix dir/file permissions on a given directory
fix() {
  if [ -d "$1" ]; then
    find "$1" -type d -exec chmod 755 {} \;
    find "$1" -type f -exec chmod 644 {} \;
  else
    echo "usage: fix [directory]"
  fi
}

# open a GUI app from CLI
open() {
  if [ -z $1 ]; then
    echo "usage: open [application]"
  else
    $1 &>/dev/null &
  fi
}

# auto send an attachment from CLI
send() {
  if [ $# -ne 2 ]; then
    echo "usage: send [file] [recipient]"
  else
    echo "Auto-sent from linux. Please see attached." | mutt -s "File Attached" -a $1 -- $2
  fi
}

# find simplified
seek()  {
  if [ $# -eq 0 ]; then
    echo 'Usage: '
    echo '   seek <*d,f> <pattern> <*location>'
    echo '   Search directory for file of folder match (*optional)'
  else
    case $1 in
      d ) if [ -z "$3" ]; then
            find . -type d -iname "*$2*"
          else
            find "$3" -type d -iname "*$2*"
          fi
          ;;
      f ) if [ -z "$3" ]; then
            find . -type f -iname "*$2*"
          else
            find "$3" -type f -iname "*$2*"
          fi
          ;;
      * ) if [ -z "$2" ]; then
            find . -iname "*$1*"
          else
            find "$2" -iname "*$1*"
          fi
          ;;
    esac
  fi
}

# mail stats
fmail() {
  local -A counts; local i

  for i in "${MAILDIR:-${HOME}/mail}"/**/new/*
    { (( counts[${i:h:h:t}]++ )) }
  for i in ${(k)counts}
    { print -n ${i//\[Gmail\]./}: $counts[$i]' ' }
}

# go to google for anything
google() {
  local term="$@"

  local URL="http://www.google.com/search?q=${term// /+}"

  $BROWSER "$URL" &> /dev/null
}

# push git repo
pushrepo() {
  pushd ${HOME}/docs/myconfs &> /dev/null
  if [[ $(git status | wc -l) -ne 2 ]]; then
    git status
    git commit -a -m "last commit"
    git push
  else
    echo "==> repo up-to-date"
  fi
  popd &> /dev/null
}

# find binary provided by a package
pacexe() {
  for ARG in $(pacman -Qql $1); do
    [[ ! -d $ARG ]] && [[ -x $ARG ]] && echo $ARG;
  done
}

# tmp connect to ssh host
sshtmp() {
    ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" "$@"
}

# get file & directory count
files() {
  set "${1:-$PWD}"; echo "==> Files: $(find "$1" -type f | wc -l), Dirs: $(find "$1" -type d | wc -l) [$(du "$1" | awk '{print $1}')]"
}

# fold functions in vim
# vim:foldmarker={,}
